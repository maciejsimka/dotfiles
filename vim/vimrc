if !exists('g:env')
  if has('win64') || has('win32') || has('win16')
    let g:env = 'WINDOWS'
  else
    let g:env = toupper(substitute(system('uname'), '\n', '', ''))
  endif
endif

" macOS specific settings
if g:env =~ 'DARWIN'
  set rtp+=/usr/local/opt/fzf
endif

" Plugins {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" netrw (disable)
let g:loaded_netrw = 1
let g:netrw_loaded_netrwPlugin = 1

Plug 'adigitoleo/vim-mellow' " colorscheme
Plug 'christoomey/vim-tmux-navigator' " tmux integration
Plug 'jiangmiao/auto-pairs' " auto close parens etc.
Plug 'junegunn/fzf.vim' " fuzzy search
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'
Plug 'junegunn/vim-peekaboo' " show registers
Plug 'justinmk/vim-dirvish' " netrw replacement
Plug 'markonm/traces.vim' " highlight patterns
Plug 'mhinz/vim-startify' " start screen
let g:startify_session_dir = '~/.local/share/nvim/sessions/'
let g:startify_lists = [
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
  \ ]
let g:startify_bookmarks = [ '~/dotfiles', '~/.config/nvim/autoload/plugins.vim' ]
let g:startify_session_persistence = 1
let g:startify_change_to_dir = 0
let g:startify_session_sort = 1
let g:startify_custom_header = ''
Plug 'qpkorr/vim-bufkill' " close buffer helper
Plug 'romainl/vim-cool' " search highlight
Plug 'romainl/vim-qf' " quickfix improvements
Plug 'romainl/vim-qlist' " include-search and definition-search improvement
Plug 'tpope/vim-abolish' " common typo fix
Plug 'tpope/vim-commentary' " commenting out tools
Plug 'tpope/vim-eunuch' " UNIX helpers
Plug 'tpope/vim-repeat' " . for some plugins
Plug 'tpope/vim-surround' " surrounding mappings
Plug 'tpope/vim-unimpaired' " bracket mappings
Plug 'wellle/targets.vim' " additional text targets
Plug 'machakann/vim-highlightedyank' " highlight yanked region
let g:highlightedyank_highlight_duration = 500

" language support
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'cakebaker/scss-syntax.vim'
Plug 'digitaltoad/vim-pug'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient
let g:go_def_mapping_enabled = 0
Plug 'hail2u/vim-css3-syntax'
Plug 'jparise/vim-graphql'
Plug 'leafgarland/typescript-vim'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
let g:javascript_plugin_flow = 1
Plug 'stephpy/vim-yaml'
Plug 'styled-components/vim-styled-components'
Plug 'tbastos/vim-lua'
Plug 'tidalcycles/vim-tidal'
let g:tidal_target = "terminal"

call plug#end()
" }}}

" UI {{{
set termguicolors
set background=dark
colorscheme mellow
set cursorline " highlight current line
set number relativenumber " set relative line numbers
set list listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " show invisibles
set splitbelow splitright " more intuitive vertical and horizontal splits
set autowriteall " save buffers as often as possible
set hidden " allow hiding modified buffers
set undofile " persistent undo
set clipboard^=unnamedplus " use system clipboard
set scrolloff=15
set cmdheight=2
set shortmess+=c
set updatetime=300
set signcolumn=yes
" }}}

" avoid issues with language servers
set nobackup
set nowritebackup

" Indentation {{{
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set foldmethod=syntax
set foldlevel=999
" }}}

" soft text wrapping
set wrap
set linebreak
set nolist

" Search {{{
" interactive substitution
set inccommand=nosplit
" case insensitive search if query is lowercase
set ignorecase smartcase
" use rg for grep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat=%f:%l:%c:%m,%f:%l%m,%f\ \ %l%m
" }}}


augroup autocmds
  autocmd!

 " even out splits
  autocmd VimResized * wincmd =

 " check for file changes more often
  autocmd BufEnter,FocusGained * :checktime

augroup END

runtime! keybindings.vim
